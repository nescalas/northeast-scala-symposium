[{"abstract":"Ah, simplicity! Everyone values simplicity, but it's tricky to define, and if it didn't compete with other things we value, we would never lack it. I'll argue that simplicity is worth pursuing, that choosing Scala demonstrates that pursuit, and that we should pursue it in related domains, too.","audience_level":"All","avatar":"https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/23520/eggs_400x400.jpg","bio":"I'm a country urbanist, provincial cosmopolitan, Protestant catholic, and Luddite technologist.","description":"See abstract.","location":"Unknown","name":"Nicholas McAvoy","organization":"","tags":[],"talk_format":"Lightning (15 minutes)","title":"Make things simple. Make simple things.","twitter":"ohbadiah","url":"http://nickmcavoy.com"},{"abstract":"I used ScalaJS to build a data-visualization I wanted: venn-diagrams where regions' areas are proportional to user-input numbers.\n\nI'll show some demos and discuss sub-components I built along the way (like cubic-/quartic-equation-solvers with autodiff-able numeric types! for JS and the JVM!).","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/e26c2679c3679018dd705d613537f91c?s=500","bio":"Ryan has been writing open-source Scala for 4 years at [Hammer Lab](http://www.hammerlab.org/), at Mount Sinai School of Medicine in NYC. He likes to publish small, reusable component-libraries, is sad because programming is tedious, hard, and error-prone, and thinks Scala holds the key to more sane software-development. He lives in Brooklyn and likes to throw aerobies.","description":"Scientific literature is rife with Venn-diagrams that confuse rather than clarify.\r\n\r\nFor example, all 32 elements of the powerset of 5 sets are represented in this \"symmetric\" Venn-diagram:\r\n\r\n[![5-snake Venn-diagram](https://cl.ly/3J3O0q1U311s/Screen%20Shot%202017-09-18%20at%2012.32.20%20AM.png)](http://www.hindawi.com/journals/bmri/aa/456479/)\r\n\r\n üÜí üòé ü¶Ñ:\r\n \r\n‚Ä¶but there is a section with weight \"4\" that's bigger than a \"35\" that's still bigger than a \"509\"!\r\n\r\nüòî üëéüèº ‚õà\r\n\r\n4 intersecting ellipses can yield all 16 possible subsets of a set of 4 sets:\r\n\r\n[![4 ellipse Venn-diagram](https://cl.ly/011P013s0w1R/Screen%20Shot%202017-09-18%20at%2012.35.25%20AM.png)](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3753564/pdf/btt375.pdf)\r\n\r\nüòç üëè üéâ:\r\n\r\n‚Ä¶but this one has a \"0\" that's bigger than a \"112\"!\r\n\r\nüò° üôÄ üòø\r\n\r\nI set out to do better, learned about and used ScalaJS, and ended up with [a webapp](https://github.com/ryan-williams/apvd) and [many](https://github.com/hammerlab/math-utils/tree/scalajs) [supporting](https://github.com/hammerlab/iterators/tree/scalajs) [libraries](https://github.com/hammerlab/test-utils/tree/scalajs) (published for the JVM and JS!) that are interesting, I think!\r\n\r\nIn this talk I'll demo them and talk about interesting software and mathematical bits from along the way. Thanks!","location":"Unknown","name":"Ryan Williams","organization":"Mt. Sinai School of Medicine","tags":["scalajs","typelevel","react","scalajs-react","sbt","math","dataviz"],"talk_format":"Long (45 minues)","title":"Area-proportional Venn-diagrams with Scala(JS)","twitter":"runsascoded","url":"http://runsascoded.com"},{"abstract":"Seekers of rigorous math look to Bayesian statistics and the modeling language Stan; proponents of software rigor love Scala's compiled, type safety.  We introduce ScalaStan, a fundamentally new interface to Stan which enables type-safe programatic manipulation of Stan programs via an embedded DSL.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/36149ad9d4977fd0208f89f504e07eac?s=500","bio":"Dave Hahn has been blurring the lines between math and software for nearly a decade.  He currently enables planet-scale crop modeling at CiBO Technologies by building software tools that accelerate data science through baked in math and software rigor and automation.","description":"Stan is a probabilistic programming language for statistical modeling, data analysis, and prediction.\r\nBy implementing a statistical model in Stan, one can use Stan to perform Bayesian inference using MCMC (Markov-Chain Monte-Carlo) as well\r\nas optimization and variational inference.  We use Stan at CiBO to build sophisticated plant science models of millions of farms.\r\n\r\nScalaStan is a fundamentally new kind of interface to Stan.  Existing interfaces to languages such as R or Python enable a run-time integration\r\nwith Stan, whereas ScalaStan models are written in an embedded Stan-like DSL and data is marshaled to and from Stan in a type-safe way.  Caching of Stan results\r\nand models makes iterative development fast and the compiler keeps your Stan syntax correct.\r\n\r\nIn this talk, we show how the Scala type system allows us to enforce type-safety in the stan model and prevents us from generating invalid Stan\r\ncode.  Next, we show how the ScalaStan DSL can be used to generate higher-level Stan models.  Finally, we dive into the details of several\r\nspecific techniques ScalaStan employs to enforce type safety and prevent invalid code an embedded DSL.","location":"Unknown","name":"Dave Hahn","organization":"Cibo Technologies","tags":["DSL","Type-Safe","Stan"],"talk_format":"Medium (30 minutes)","title":"ScalaStan:  A yummy, probabilistic programming, DSL, math rigor, sandwich","twitter":"","url":"https://github.com/cibotech/ScalaStan"},{"abstract":"Like traveling to another country, alternatives offer clearer understanding.  Different ways of using logging, config files, versioning schemes, class naming, date formats and more will be presented.  This should offer brain tingling perspectives and clearer self reflection.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/e5d079b45859e9ebf9aeba8cd9630f49?s=500","bio":"In a professional setting, I have been using Scala for scientific data visualizations since the 2.7 era (~8 years).  And have been using Data visualization tools processing (java), d3 (js) for ~15years.","description":"This talk offers different ways to do things. However, it is not an explicit argument to do things different. Alternatives are offered for clearer understanding.  Just as traveling to another country or learning a different language illuminates your own.\r\n\r\nFrom Scala, we often are the ones doing something different, both on a language level and community.  \r\n\r\nThis talk will offer different ways of doing things for logging, config files, versioning schemes, class naming conventions, date formats and more.  This should offer brain tingling alternative perspectives and clearly understanding of the problems.\r\n","location":"Reston, VA","name":"Aaron J. Radke","organization":"","tags":["lib","conventions"],"talk_format":"Lightning (15 minutes)","title":"Lessons from Salmon, Yaks, and bicycles (think different)","twitter":"radke","url":"https://drx.cc/cv"},{"abstract":"I'll talk about easy, approachable rules of thumb to leverage Scala's type system to improve correctness which can be used in almost any codebase, without enough implicits to make your head (and compiler) explode.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/674da3534f3fc8e95568ee8cfad3de73?s=500","bio":"I've been at Bridgewater Associates for three and a half years now, slinging code to make Ray Dalio's TED talk a reality (for the curious: https://www.ted.com/talks/ray_dalio_how_to_build_a_company_where_the_best_ideas_win). Before that I was a student majoring in math and minoring in religion. My life outside of the job involves biking and drive-by pull requests. One of my proudest moments on the job was getting paid five dollars to drink a bottle of BBQ sauce and then getting paid another five dollars to stop drinking said bottle of BBQ sauce. I now drink ketchup instead.","description":"Scala provides a lot of high-powered tools and libraries for ensuring correctness at compile-time. However, these can often be either intimidating for new Scala developers or just don't fit the style of a certain codebase. Often though there's a lot of low-hanging fruit when it comes to structuring your type signatures that can offer big dividends when it comes time to refactor and are accessible for any newcomer to your codebase. \r\n\r\nI'll go over a list of simple, but potentially non-obvious, guidelines to help with correct sequencing of data transformation steps, self-documenting pre- and post-conditions in the types, and more, as well as common mistakes to be avoided. For example: \r\n\r\n+ Classic defensive programming techniques are probably a code smell when it comes to types\r\n+ Total functions are good, total + surjective is better (don't know what surjective is? I'll tell you in the talk :))\r\n+ And more!\r\n\r\nThese guidelines as well as the reasoning behind them that apply to both Scala written in a more OO-FP hybrid style as well as Scala written in a more pure FP style. They serve as a demonstration that it doesn't take a lot of fancy bells and whistles to get meaningful mileage out of your type system and as a field report of what's paid off (and what hasn't) over the lifetime of a Scala-heavy tech team.","location":"Unknown","name":"Changlin Li","organization":"","tags":["scala","types","correctness"],"talk_format":"Lightning (15 minutes)","title":"Moving Beyond Defensive Programming: Guidelines for Practical Correctness Through Type Signatures","twitter":"","url":""},{"abstract":"Use the mighty magic of Shapeless via PureConfig to scrap the plentiful boilerplate of loading configuration. Refined declaratively improves correctness in configuration. See how these techniques can stop failures that have taken down some of the industry's most important services.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/368f30fecedfc058b8057a8da772018c?s=500","bio":"In one of his first jobs, Leif wrote software for livestock auction yards. His boss also owned the town newspaper. When the only reporter fell ill, Leif played journalist for a couple days. He published pieces he's glad don't appear online. His second most noteworthy accomplishment at that job was fixing bugs in 3,000-line functions. The resulting trauma contributes to his penchant for static analysis. Leif lives in Bozeman, Montana, where he cycles, skis, and runs on various surfaces in an attempt to keep up with his neighbors.","description":"Hiding inside your configuration files are latent errors waiting to take down your app in a series of cascading failures. Let‚Äôs take a look at the academic paper which made that claim and the authors‚Äô suggestion for how to avoid those problems. Then we'll look at how we can use PureConfig and Refined to automate those safer practices. We'll end with some lessons learned from using PureConfig over a few years.","location":"Unknown","name":"Leif Wickland","organization":"Rubicon Project","tags":["PureConfig","Refined","Shapeless"],"talk_format":"Medium (30 minutes)","title":"Defusing the configuration time bomb with PureConfig and Refined","twitter":"leifwickland","url":""},{"abstract":"EvilPlot is a new Scala library for graphical combinators that enables composition of data visualizations and makes creating complex, multivariate displays easy. This talk will demonstrate the use of EvilPlot to create intricate and meaningful statistical graphics.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/e7768542a9bf7c8a7eb4d69fbe356239?s=500","bio":"Zach studied chemistry at Tufts University, where he worked in a computational chemistry group researching ice nucleation. He joined CiBO Technologies in July 2017 as a junior software engineer.","description":"EvilPlot is a Scala library for creating data visualizations. Approaches to plotting like D3 provide only low-level primitives, enabling creation of complex graphics at the expense of conciseness. Tools like ggplot2 posit a 'grammar of graphics' that make it easy to construct charts--until the grammar is pushed to the limits of its expressivity. EvilPlot provides a combinator-based capability for composing complex scenes while permitting higher-level plotting abstractions. This talk will give an overview of EvilPlot and demonstrate increasingly sophisticated graphics rendered to HTML5 Canvas using ScalaJS.","location":"Unknown","name":"Zachary Graziano","organization":"CiBO Technologies","tags":["visualization","datascience","combinator","visualisation"],"talk_format":"Lightning (15 minutes)","title":"Combinator-based data visualization in Scala with EvilPlot","twitter":"","url":""},{"abstract":"In this quick talk, R√∫nar will give an intro to Haskell, compare it to Scala, and talk about why you might use one over the other.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/fe3ec04d1300b66c6afd32bf56979e54?s=500","bio":"R√∫nar is one of the authors of Functional Programming in Scala and a cofounder of Unison Computing.\r\n","description":"In this quick talk, R√∫nar will give an intro to Haskell, compare it to Scala, and talk about why you might use one over the other.","location":"Boston","name":"R√∫nar Bjarnason","organization":"Unison Computing","tags":[],"talk_format":"Lightning (15 minutes)","title":"Should You Switch to Haskell?","twitter":"runarorama","url":"http://blog.higher-order.com"},{"abstract":"Purely functional code is easier to reason about ... is the functional programmer's guiding mantra. But to what extent is it really easier to reason about? This short talk will look at and challenge this claim, and propose a pragmatic attitude towards purity.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/d10bc47408e033a8e3713d69309e89a2?s=500","bio":"Bill Venners is president of Artima, Inc., provider of Scala consulting, training, books, and tools. He leads the open source projects for the ScalaTest testing library and the Scalactic library for functional, object-oriented programming. He is coauthor with Martin Odersky and Lex Spoon of the book, Programming in Scala. And he is a community representative on the Scala Center's Advisory Board.","description":"This lightening talk is designed to make the audience think about something they may have just accepted, something at the very heart of functional programming: the benefits of pure functional code over imperative code.","location":"Unknown","name":"Bill Venners","organization":"Artima, Inc.","tags":["functional purity"],"talk_format":"Lightning (15 minutes)","title":"Pragmatic Purity","twitter":"bvenners","url":"http://www.artima.com"},{"abstract":"We all want to build systems that we can comprehend, and then use as components in further systems. Functional programming has an easy answer: functions are compositional. In this talk, we'll look at the abstract interface of composition, and maybe get some insight into what it all means.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/fe3ec04d1300b66c6afd32bf56979e54?s=500","bio":"R√∫nar is one of the authors of Functional Programming in Scala, and a cofounder of Unison Computing.","description":"This is a talk aimed at beginners and intermediate developers, about compositionality in software. We'll talk about what it is and why it matters, and what kinds of things prevent composition. We'll delve into category theory and talk about what \"compositional reasoning\" really means.","location":"Boston","name":"R√∫nar √ìli Bjarnason","organization":"Unison Computing","tags":[],"talk_format":"Long (45 minues)","title":"Composing Programs","twitter":"runarorama","url":"http://blog.higher-order.com"},{"abstract":"D3js patterns have been re-envisioned as typeclasses for scala to provide visual mappings for generic data types.  Using types not only provides \"safer\" type-checked code, but can also inform important visuals encodings to remove extra boilerplate and provide simpler code.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/e5d079b45859e9ebf9aeba8cd9630f49?s=500","bio":"In a professional setting, I have been using Scala for scientific data visualizations since the 2.7 era (~8 years).  And have been using Data visualization tools processing (java), d3 (js) for ~15years.\r\n","description":"This is a quick dive illustrating some useful *typeclasses* for data vizualizations within scala.  Some useful patterns from D3js have been re-envisioned as typeclasses within scala to easily provide visual mappings for generic data types.  Using types not only provides \"safer\" type-checked code, but can also inform important visuals encodings to remove extra boilerplate and provide simpler code.\r\n\r\nPractical motivation for these typeclasses came after years of using visualization libraries such as processing and D3js for scientific applications.  D3js offers rich concepts to encode visualization, but lives in the javascript world.  Scala has a rich typesystem that can do justice to these D3js concepts while supporting high-end execution environments.\r\n","location":"Reston, VA","name":"Aaron J. Radke","organization":"Metron, Inc","tags":["data viz","typeclass"],"talk_format":"Lightning (15 minutes)","title":"Typeclasses for Data Visualization","twitter":"radke","url":"https://drx.cc/cv"},{"abstract":"My name is Daniel and I am not entirely sure if I like Scala or not.\nMy name is Daniel and I am entirely lost.\nMy name is Daniel and I used to be a C# dev\nMy name is Daniel and I have fallen in love","audience_level":"Beginner","avatar":"https://secure.gravatar.com/avatar/97ce4900a95fd04f063b2347708de848?s=500","bio":"Daniel has been working in the .NET space with C# since 2002. After 15 solid years dealing primarily with C# he had the opportunity to bite into scala and has developed a love and hate relationship with it.","description":"About 6 months ago I volunteered to move to a Scala team that needed immediate help and was tossed into the deep end. Mission critical problem, major scaling concerns, looming deadline, and no training. I was confident it would be no problem.\r\n\r\nI was both wrong and right. The project got done, ahead of time and well above the scale we were worried about. I wrote my first play controller, I wrote my first bit of database access, and I ran head first into Scala writ large. Follow along as an experienced but new to Scala engineer goes through the process of grasping implicit, hides in fear from Either, sheds his first tear over SBT, and grows to see the light of the language, while still sometimes wishing he was back in his comfort zone. ","location":"Unknown","name":"Daniel O'Connell","organization":"Rally Health","tags":["C#","Scala"],"talk_format":"Medium (30 minutes)","title":"12 steps of admitting Scala might just be for you; or how I learned to stop fearing Either","twitter":"","url":"http://engineering.rallyhealth.com/"},{"abstract":"Getting started with a new environment can be hard. However if we can outline the basic building blocks of an application we can make building services easily. This talk will take a very practical approach and will make sure everyone is capable of building simple applications with http4s.","audience_level":"Beginner","avatar":"https://secure.gravatar.com/avatar/279e6a3705b1a2dbc278a7b5a44f51c8?s=500","bio":"Chris is a Senior Software Engineer at Banno. He is a firm advocate of Functional Programming. He maintains http4s and cats-effect libraries and contributes regularly to the Open Source Community.","description":"http4s is a functional http library that can help you build services. We will take a practical approach and walk through building common server implementations and requirements. \r\n\r\nFrom \"Hello World\" to JSON to concurrent state this talk will enable you to build purely functional programs with real world applications.","location":"Saint Petersburg, Florida","name":"Christopher Davenport","organization":"Banno","tags":["http4s","fp","functional programming","cats","fs2"],"talk_format":"Long (45 minues)","title":"Building Http4s Microservices","twitter":"davenpcm","url":"https://github.com/ChristopherDavenport"},{"abstract":"A lot of us have heard of the benefits of random-instance property-based testing. But how many of these tests actually test something we care about? I'd like to show an alternative based on Haskell's Smallcheck library, which gets some expressivity from a nice abstraction called LogicT.","audience_level":"Intermediate","avatar":"https://secure.gravatar.com/avatar/b6444b44088d161c8207bf32d6758f84?s=500","bio":"Since 2010, I've been using the kind of type-checked FP that restricts programs to math-like total functions (as exclusively as I've known how). I started doing this first for a government project in Java, which was feasible, but a touch verbose. I switched to Scala shortly there after while working at Rackspace. Recently, I've been using Haskell professionally, orchestrating machine learning algorithms for my current employer CognitiveScale. I also help advocate for type-checked FP in my home town of Austin, co-organizing our Scala and Haskell meetups.\r\n\r\nI'm not sure these are the greatest reasons for someone to listen to me. I just care about doing this stuff well, because it seems like too much software breaks a lot and is hard to work with.","description":"A lot of us know what it feels like to start using Scalacheck, or a similar library. We randomly test for properties that ideally hold true universally.  We see monads in action as we make random generators for custom data types from simple generators for more primitive types. I've even heard people lightly boast about how many tests they run. Hundreds. Thousands. Millions.\r\n\r\nBut there's a cost to this approach, right? Of course, these tests take time to run. But also, massaging random generators for different contexts can get tedious. At the end, how do we know we've tested good test cases? At some point how many of these tests are semantically redundant? Would we be better off with a nested for-loop of corner cases to get every permutation?\r\n\r\nI'd like to discuss a port of a library from Haskell called Smallcheck, which builds off of an abstraction called LogicT, which is based on a nice \"functional pearl\" paper called \"Backtracking, Interleaving, and Terminating Monad Transformers.\" So there's a few things we can talk about. Here's a rough flow.\r\n\r\n1. Intro to property-based testing\r\n2. The state of the art: Quickcheck/Scalacheck (pros/cons)\r\n3. the \"small-scope hypothesis\" and an alternative: Smallcheck\r\n4. An illustration of the alternative usage (pros/cons)\r\n5. Haskell is a nice place to steal ideas from\r\n6. An overview of LogicT\r\n7. From LogicT to a Smallcheck4S implementation\r\n\r\nThe first part of the talk (1-5) should be accessible by most audiences familiar with Scala. The second part is more intermediate-level implementation details for those interested.\r\n\r\nI'm certainly not trying to replace one false panacea (Quickcheck-style) with another one (Smallcheck-style). I'd like to just put forth more alternatives so we can be more deliberate in our choices.","location":"Unknown","name":"Sukant Hajra","organization":"CognitiveScale","tags":["Scala","Property-based testing","LogicT"],"talk_format":"Long (45 minues)","title":"LogicT [small]Check Yo Self","twitter":"shajra","url":""},{"abstract":"I will discuss a few of the limitations our engineers have found with Scala‚Äôs built-in immutable Map collection to represent key-value pairs. I will present a simple immutable collection (PMaps) that we built to overcome some of the problems we found and enable powerful, principled, and clean code.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/1a509f4a196669e428a11f4238d92bcc?s=500","bio":"After studying abstract math and philosophy in school, Jason worked at a bank for two years before deciding to teach himself to code. Scala was actually the first programming language he ever learned when he became an Investment Engineer at Bridgewater two years ago. As an Investment Engineer, he develops and maintains portfolio construction logic primarily using functional Scala. He is incredibly passionate about reading books, functional programming, creating a great community for his engineering team, lifelong learning, playing instruments, and philosophy. ","description":"Overview\r\n---------------\r\nHave you ever tried adding a default to a Scala Map and lamented that downstream references have no idea that the default exists? Or unknowingly clobbered values in your Map by adding a value whose key was already present? Or do you ever want to combine two or more Maps with some operation (e.g. add, subtract, multiply)? \r\n\r\nWhile Scala Maps are powerful and fast, my fellow engineers and I kept running into some of their limitations, so I set out to improve them. My solution was a relatively lightweight Map collection that wraps a Scala Map, with the goals of protecting my fellow engineers from some of the unsafe properties of Maps while also enabling rich and expressive functionality on collections of key-value pairs. For example, PMaps enable:\r\n\r\n- Adding a default that is represented in the type of the collection\r\n- Convenient arithmetic operations on the collection level ‚Äì e.g. adding or subtracting the values of two collections\r\n- Explicitly handle errors when you add overlapping keys\r\n- ‚ÄòJoin‚Äô functionality that allows us to write expressive and readable business logic combining multiple collections\r\n\r\nObjectives\r\n-----------------\r\nIn the talk, I hope to:\r\n\r\n- Motivate some of the shortcomings with Scala‚Äôs built-in immutable Map collection and our decision to build our own simple Map collection.\r\n- Describe the functional programming and Scala patterns and principles I relied on, and the tradeoffs I came across in building PMaps.\r\n- Show off some of the functionality of PMaps and how they enable rich and clean logic.\r\n\r\nAccessibility\r\n------------------\r\nThis talk is meant to be accessible for all levels of Scala experience. Type classes and F-Bounded Polymorphism might be mentioned briefly, but most of the talk will be understandable for beginners and hopefully relevant even for experienced Scala users.\r\n","location":"Unknown","name":"Jason Liberman","organization":"Bridgewater Associates","tags":["Scala Collections","Principled Code"],"talk_format":"Medium (30 minutes)","title":"PMaps: Principled and Powerful Maps","twitter":"","url":""},{"abstract":"In this talk, I will discuss my experience standing up a Continuing Education program for a team of ~40 Scala engineers. I will discuss the content of our training and how we structure our training to build an intellectually vibrant community that is constantly learning and sharing what we learn.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/1a509f4a196669e428a11f4238d92bcc?s=500","bio":"After studying abstract math and philosophy in school, Jason worked at a bank for two years before deciding to teach himself to code. Scala was actually the first programming language he ever learned when he became an Investment Engineer at Bridgewater two years ago. As an Investment Engineer, he develops and maintains portfolio construction logic primarily using functional Scala. He is incredibly passionate about reading books, functional programming, creating a great community for his engineering team, lifelong learning, playing instruments, and philosophy. ","description":"Overview\r\n---------------\r\nFor our engineering team, community ethos is essential. Without a world class community, we cannot attract and retain world class talent, not to mention the fact that we want our Scala engineers to be motivated and challenged by their work. But creating an excellent community is hard, especially as an organization scales. I hope to share with you all how we incorporate learning in our engineering department in a way that incentivizes training, fosters community and meaningful relationships, and creates an ethos of lifelong learning. In addition, I will discuss why we use Scala and how using Scala helps us in our endeavor to build an intellectually vibrant community.\r\n\r\nUnlike me, not everybody enjoys casually reading 'Functional Programming in Scala' during their daily commute. Training is critical but is quickly seen as a burden or deprioritized to meet the next deadline. As a result, we designed a Continuing Education program that encourages training on a regular basis and that makes people excited to both learn and share what they learned. In other words, we want our training to be: \r\n\r\n- Self-driven\r\n- Shared\r\n- Community-oriented\r\n- Experimental\r\n- Incentivized\r\n\r\nUsing these principles as guidelines, we have implemented a number of creative training initiatives that I will share with you all, such as:\r\n\r\n- No Project Day: For one day, work on anything but your current project.\r\n- Breakfast ‚ÄòN Learns: One person discusses a topic they know something about. Everybody else eats bagels.\r\n- Engineering Library and Book Club: You want a book, you get a book. Extra points if you lead a book club on it.\r\n- ‚Ä¶and many more!\r\n\r\nObjectives\r\n----------------\r\nThe main goal of this talk will be to share some of the creative and tested ways we have incorporated Scala training on our teams. The talk will offer both simple practical suggestions you can apply today as well as a high-level framework for building a strong community of Scala programmers. It will be light and fun, and I promise it will not hurt your brain.\r\n","location":"Unknown","name":"Jason Liberman","organization":"Bridgewater Associates","tags":["Scala Community","Training","Ethos"],"talk_format":"Lightning (15 minutes)","title":"Scala for Code and Community","twitter":"","url":""},{"abstract":"Failure handling using monads is functional but painful. Throwing exceptions is easier but not functional. Could you have the best of both worlds? You could if the compiler understands types with normal and failure modes. Here is how.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/b85926c4fec3be70e4f9363d1ab7facd?s=500","bio":"Software engineer with interest in language design. ","description":"What if you might fail to provide an object `a` of type `A`? We could wrap in in, say, an object `aEither` of type `Either[E, A]`, where `E` is a description of the failure. But then, method calls like `a.m` turn into `aEither.map(_.m)`, which quickly becomes painful. Some pain can be alleviated by using `for`, but it is nowhere near as simple and clear as being able to write `a.m`. \r\n\r\nTo make make failure handling painless, we propose a new language feature, the *failable type*. Written as `A!!!E` (pronounced as *A fails as E*), object `a` of type `A!!!E` has a value of type `A` in normal mode and a value of type`E` in failure mode. Now, `a.m` is a simple method call if `a` is in normal mode and a no-op in failure mode - no `map` or `flatMap` needed. Any expression is evaluated normally, until a failure mode appears, in which case the expression is cut short and the first failure value is passed through as the value of the expression. A handful of special operations exist, for example to derive regular types from failable types. Thus failure handling becomes painless and functional at the same time.","location":"Unknown","name":"Oliver Ruebenacker","organization":"Broad Institute","tags":["failure handling","language feature proposal"],"talk_format":"Long (45 minues)","title":"Painless Failure Handling","twitter":"","url":""},{"abstract":"Type classes are basically just another way to achieve polymorphism in your code. Scary as they may seem, it turns out the idea is pretty straightforward, yet very powerful. And there‚Äôs a good chance you have already used them. Let me convince you during this live-coding session!","audience_level":"Intermediate","avatar":"https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/18502/14556779_1852755341624502_425323727956233387_o.jpg","bio":"I'm a passionate software engineer living in the JVM land - mainly, but not limited to. I also tend to play with electronics and hardware. When sharing my knowlegde, I always keep in mind that a working example is worth a thousand words.\r\n\r\nYou can find my previous talks at:\r\n\r\n- https://www.youtube.com/playlist?list=PLpGandjsW_NkTlnT0a0W3U81FgbIVDPzs\r\n- https://vimeo.com/album/4750912","description":"In this live coding session we‚Äôre going to approach a trivial problem as if we didn‚Äôt know about type classes, and see the type class concepts naturally emerge. \r\n\r\nWe‚Äôre also going to add some implicits, to see how those two language features used together allow for writing more  concise and flexible code.","location":"Warsaw, Poland","name":"Jacek Kunicki","organization":"SoftwareMill","tags":["scala","type classes"],"talk_format":"Long (45 minues)","title":"Type Classes: from Zero to Hero","twitter":"rucek","url":"http://blog.kunicki.org"},{"abstract":"In this live coding session we will explore the Reactive Streams approach used by the Monix project - one of the Scala implementations of the Reactive Streams concepts. On an almost real-life example we‚Äôre going to walk through both the basics and some more advanced usages of the library.","audience_level":"All","avatar":"https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/18502/14556779_1852755341624502_425323727956233387_o.jpg","bio":"I'm a passionate software engineer living in the JVM land - mainly, but not limited to. I also tend to play with electronics and hardware. When sharing my knowlegde, I always keep in mind that a working example is worth a thousand words.\r\n\r\nYou can find my previous talks at:\r\n\r\n- https://www.youtube.com/playlist?list=PLpGandjsW_NkTlnT0a0W3U81FgbIVDPzs\r\n- https://vimeo.com/album/4750912","description":"The code to be presented is available at https://github.com/rucek/reactive-streams-with-monix","location":"Warsaw, Poland","name":"Jacek Kunicki","organization":"SoftwareMill","tags":["scala","reactive streams","monix"],"talk_format":"Long (45 minues)","title":"Tame Your Data with Reactive Streams and Monix","twitter":"rucek","url":"http://blog.kunicki.org"},{"abstract":"There are lots of threats out there, and just as many methods to combat them -- near to every developer's heart is application security, part of any layered defense against the bad guys, a field that has only recently gained traction in the Scala community. Come see how to improve your program!","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/425b4c023a2f1ad8c01c3e7b8124c225?s=500","bio":"Sam has long been interested in security and cryptography, and has managed to make it official again since the beginning of the year at Rally Health, moving from leading a product-focused engineering team to leading application security.  When not worrying about the future of the digital world, he can be found playing pinball, chasing his 7-year-old around, and trying to write a fully-functional relational database in malbolge.","description":"Application security, while not a new field, is often a \"new to you\" field for many developers.  Depending the types of systems programmers work on, they have a completely different set of concerns -- this talk will focus on internet-facing websites and the problems they face, but a lot of the lessons learned are applicable everywhere, especially as it related to building security into a software development lifecycle.\r\n\r\nMany of the common tools available to application developers -- specifically automated scanning -- is only recently available (and useful) to the Scala community, and is slowly gaining traction. This talk will primarily cover the basic concepts of application security, as well as some of the tools that are now available to you as Scala engineers, all in one whirlwind 15 minutes!\r\n\r\nWe'll end with a call to arms to get more Scala types involved in improving the tools that security professionals can use -- we have a lot to learn from each other, and there aren't too many efforts out there in the wild to make things better.\r\n","location":"Unknown","name":"Sam Freund","organization":"Rally Health","tags":["scala","security"],"talk_format":"Lightning (15 minutes)","title":"Introduction to Application Security in Scala","twitter":"","url":"http://engineering.rallyhealth.com/"},{"abstract":"When doing physics calculations we attach units to numbers, this allows us to check our reasoning before performing the computation (e.g., 3ft x 3ft has units ft^2). Scala is a beautiful language in which to implement measuring units. Check your units at compile time and run your code at full speed!","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/9e9b9de84c44402cacf3450c113c9e84?s=500","bio":"Luca is an eccentric programmer who discovered the art of writing code during his mechanical engineering PhD. For this reason he ended up not doing any of the experiments he was assigned and published mostly applied math papers. \r\nAfter a short adventure doing data science for a sport modeling company he now works as an Investment Engineer at Bridgewater Associates. He developed and maintains three shared libraries that are the core domain and DSL of the firm‚Äôs portfolio generation logic.\r\nHe is known to his colleagues for having to take a walk in the park outside the office every time there is a ‚Äúdivergent implicit expansion‚Äù.\r\n","description":"When doing physics calculations we attach units to numbers, which allows us to check our reasoning before performing the computation (e.g., 3ft x 3ft has units ft^2). This is incredibly useful when doing computations ‚Äúwith pencil and paper‚Äù but it is hardly used in computer languages. At Bridgewater Associates LP we use the powerful type system of Scala to attach units to our numeric types, have the compiler check the units, and then run our executables with very little computational overhead (a couple of percent slower for a decently-written code).\r\n\r\nThis unit system is surprisingly light weight. It leverages Spire for the definition of abstract algebra type classes and implements a simple and intuitive unit syntax on top of it. Just a few hundred lines of code can provide the end user with very intuitive syntax like the one below:\r\n```\r\n    val oneMeter: Double @@ Meter = 1.0.attach[Meter]\r\n    val twoMeters = 2.0.attach[Meter]\r\n    \r\n    //\r\n    val threeMeters: Double @@ Meter = oneMeter + twoMeters\r\n    \r\n    val fourSeconds = 2.0 * twoSeconds // type Double @@ Seconds\r\n    \r\n    //\r\n    val twoSecond = 2.0.attach[Second]\r\n    val velocityVector = (5.0, 10.0).attach[MeterPerSecond]\r\n    val divTest2 = distance / twoSecond  // type (Double @@ Meter, Double @@ Meter\r\n```\r\n\r\nNotice how attaching units is not limited to Double, but is also applied to data structures (in this case a tuple), and that when dividing two units the resulting unit is calculated by the compiler (in the example above MeterPerSecond / Second yields Meter).\r\n\r\nIn my talk I will describe how this result can be obtained with just a few hundred lines divided in four distinct sections:\r\n\r\n* Relying on the Spire library for the definition of the abstract algebra typeclasses.\r\n* Creating a very simple class to wrap numeric quantities with a unit.\r\n* Provide simple rules to have the compiler resolve units. This is obtained with a minimal DSL that specifies the product of any two units.\r\n* Create a very intuitive syntax that allows the user to use units with the four basic operands (+, - , /, *). This is where this project departs from the philosophy of Spire, which defines different operand for different algebraic categories (for example division in a vector space is done with operand ‚Äú:/‚Äù instead of the standard division). I will comment on this design choice that may seem objectionable to someone with a strong theoretical background.\r\n\r\nA simplified version of the Bridgewater unit system is available on Github at https://github.com/tenormadness/units\r\n\r\nThis unit system has become a very popular component of the DSL we use at Bridgewater to express our investment intent. From a project management perspective, developing this unit system within a corporate environment where the different components of a workgroup can come from very diverse backgrounds was both challenging and stimulating. Though time I developed a set of rules on how these kind of projects should unroll. \r\n\r\n* Start designing from the syntax, which has to be accessible and intuitive to any user. This may sound controversial but there is a good reason to do this: in Scala it is always possible to decouple the syntax from the underlying structure, if you think about your code correctly. Spend your brain energy lavishly in not having category theory and Kleisli arrows be a basic requirement to understand the syntax of your library!\r\n* Build the inner core of your library to be as structured as possible, if necessary do not fear using math, or any high level abstraction. The more you can break things into composable simple items the happier you will be in the long run.\r\n* Minimize complexity: the best type parameter is the one that is not there, the best higher kind is that of order zero! If you need to build something technically complex make sure it is self-contained and not exposed to all users.\r\n* Do not cover or hide your code, let the curious user extend it. Spend time supporting your users way past the basic syntax you provided. Sooner than you expect you will see people that never coded before talking about algebraic types and functors (‚Ä¶ and with some patience even monads!).\r\n\r\n\r\n","location":"Unknown","name":"Luca Tosatto","organization":"Bridgewater Associates","tags":[],"talk_format":"Medium (30 minutes)","title":"Add units to your numbers and have the compiler check your algebra","twitter":"","url":""},{"abstract":"Did you ever find yourself doing HTTP calls from Scala code and wishing it would be easier? \n\nIf so, `sttp` might be the library you've been waiting for. An URI interpolator, type-safety, request execution decoupled from definition and multiple backends are all here to make your life easier!","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/0db18e72e1d2a0d42b0d96c8730dd458?s=500","bio":"I am one of the co-founders of SoftwareMill, where I code mainly using Scala and other interesting technologies. I am involved in open-source projects, such as sttp, MacWire, Quicklens, ElasticMQ and others. I have been a speaker at major conferences, such as JavaOne, LambdaConf, Devoxx and ScalaDays.\r\n\r\nApart from writing closed- and open-source software, in my free time I try to read the Internet on various (functional) programming-related subjects. Any ideas or insights usually end up with a blog (https://softwaremill.com/blog)","description":"There‚Äôs a number of great Scala HTTP libraries. You can do synchronous or fully asynchronous calls, stream requests and responses, use either standard Scala `Future`s or other concurrency wrappers. However, on the API side, when it comes to programmer-friendliness, we can do better!\r\n\r\nThe main goal of sttp is to provide a simple, type-safe API for defining HTTP requests, sending them and receiving responses. In the mainly live-coding talk we‚Äôll go through the main API design decisions: we‚Äôll see how partial requests (‚Äútemplates‚Äù) can be built, how is type-safety provided via type parameters and what do they mean, how is defining a request decoupled from execution.\r\n \r\nThe presentation will also cover other sttp features, such as the URI interpolator and request/response body streaming support, integration with Akka Streams, Monix, Scalaz and Cats. \r\n\r\nNo slides, just code!","location":"Unknown","name":"Adam Warski","organization":"SoftwareMill","tags":["scala","http client","functional programming","akka","monix","cats","scalaz"],"talk_format":"Medium (30 minutes)","title":"sttp: the Scala HTTP client that you always wanted!","twitter":"adamwarski","url":"http://softwaremill.com"},{"abstract":"You've probably heard about Free Monads or Tagless Final in the context of writing Scala code. \n\nBut why and when to use them? \nWhy not just use `Future`s or `Tasks`s everywhere? \nHow do these approaches compare?\n\nFind out in this live-coding talk!","audience_level":"Intermediate","avatar":"https://secure.gravatar.com/avatar/0db18e72e1d2a0d42b0d96c8730dd458?s=500","bio":"I am one of the co-founders of SoftwareMill, where I code mainly using Scala and other interesting technologies. I am involved in open-source projects, such as sttp, MacWire, Quicklens, ElasticMQ and others. I have been a speaker at major conferences, such as JavaOne, LambdaConf, Devoxx and ScalaDays.\r\n\r\nApart from writing closed- and open-source software, in my free time I try to read the Internet on various (functional) programming-related subjects. Any ideas or insights usually end up with a blog (https://softwaremill.com/blog)","description":"Functional programming is on the rise; monads are everywhere. But how to choose the right wrapper for the values which we manipulate (i.e. monad)? Quite often, the answer is far from obvious, and it‚Äôs useful to delay the decision as much as possible. Furthermore, picking a particular monad too early might only obscure important business logic details.\r\n\r\nThere are (at least) two ways to solve the problem, which are quite popular: free monads and the tagless final encoding. Both are equivalent in expressive power, but are radically different when it comes to code.\r\n\r\nIn this live-coding talk we‚Äôll see how to transform a simple application which relies on `Future`s into more generic forms, using either the free monad or tagless final. We‚Äôll see how these two representations compare in terms of boilerplate, readability, composability and stack-safety. We‚Äôll also discuss which approach might be a better fit for selected use-cases.","location":"Unknown","name":"Adam Warski","organization":"SoftwareMill","tags":["functional programming","scala","monad","free","tagless"],"talk_format":"Long (45 minues)","title":"Free monad or tagless final? How not to commit to a monad too early.","twitter":"adamwarski","url":"http://softwaremill.com"},{"abstract":"Yes! You can be functional and do DI.\n\nAnd is the Reader Monad the answer?\nNo! The reader monad isn't a DI-alternative; on the contrary: it complements constructor-based DI.\n\nWhen to use which approach? What are the use-cases? Find out in this live-coding session.","audience_level":"Beginner","avatar":"https://secure.gravatar.com/avatar/0db18e72e1d2a0d42b0d96c8730dd458?s=500","bio":"I am one of the co-founders of SoftwareMill, where I code mainly using Scala and other interesting technologies. I am involved in open-source projects, such as sttp, MacWire, Quicklens, ElasticMQ and others. I have been a speaker at major conferences, such as JavaOne, LambdaConf, Devoxx and ScalaDays.\r\n\r\nApart from writing closed- and open-source software, in my free time I try to read the Internet on various (functional) programming-related subjects. Any ideas or insights usually end up with a blog (https://softwaremill.com/blog)","description":"Like it or not, but how in-code dependencies are managed is one of the key decisions that we have to make when working on a project.\r\n\r\nWe‚Äôve seen various approaches to Dependency Injection come and go. In Scala's early days, the Cake Pattern was quite fashionable; but there was just too much boilerplate. Instead, maybe we could just use plain constructors for wiring dependencies? Use a macro to do the wiring for us (MacWire)? Use a hybrid service locator (SubCut, Scaldi)? Or go fully functional, and use the Reader Monad? But is the Reader Monad really a replacement for Dependency Injection frameworks/libraries? Finally, maybe we should stick with proven Java-land solutions, like Guice (used e.g. by the Play Framework)?\r\n\r\nIn this live-coding talk I‚Äôll try to clear the above doubts (at least partially) and propose some practical solutions. We‚Äôll go through wiring a simple application using constructor-based dependency injection, reader-monad based dependency injection, and finally mixing the two for the best results. ","location":"Unknown","name":"Adam Warski","organization":"SoftwareMill","tags":["scala","dependency injection","reader monad","constructors"],"talk_format":"Long (45 minues)","title":"Can you be functional and do Dependency Injection?","twitter":"adamwarski","url":"http://softwaremill.com"},{"abstract":"CiBO‚Äôs Automatron encapsulates common sets of resources, reducing duplication and minimizing required knowledge of AWS internals, and adds deployment automation. We use Scala for everything from data science to UI, and now we've added strong type-safety to the world of infrastructure automation.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/fcb404bc8df4330e4fae7d698d4d2ccd?s=500","bio":"John, a.k.a. JFK, has been playing with computers since green was the only color on the screen. Several years ago, he unwittingly volunteered to manage his team's then-small amount of AWS infrastructure and has been trying to make that process more dependable and less error prone. When he's not in front of a screen, he's probably cleaning an aquarium or luring the neighborhood cats with his violin.","description":"Automatron is both a type-safe higher-level abstraction for infrastructure definition and a tool to automate deployments. CiBO Technologies had a need for a tool like this to be able to create new environments for customers that would be unique but contain many similar resources, maintain a standard level of security constraints and protections, and monitor and alert on AWS costs, application performance, security violations, etc. Furthermore, we also wanted to give developers without any significant AWS or operations experience the ability to define and deploy those environments. Come hear about what Automatron is, how it works, and how it‚Äôs allowed CiBO to empower its developers to deploy more well-defined environments more frequently with less impact on the operations team.","location":"Unknown","name":"John Klingler","organization":"CiBO Technologies","tags":["scala","AWS","Infrastructure"],"talk_format":"Lightning (15 minutes)","title":"Automatron: Simplifying AWS Automation with CloudFormation Template Generator","twitter":"jfklingler","url":""},{"abstract":"In this talk the argument will be made that Futures are an over used construct. Using examples, I will highlight problematic patterns and contrast those with alternatives. These alternatives, things like Task, syntax on type classes or nothing at all, are more flexible and easier to reason about.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/e61aa9f3d632781569b0115b9f3154fd?s=500","bio":"Owein is the Director of Creatives Engineering at MediaMath, an adtech company. His teams have built systems in Scala which handle over 1M req/s with under 10ms in app latency requirements. Originally starting out as a mathematical programmer working in infrared countermeasures, he moved on to become a full fledged software developer involved first with NASA satellite systems and then with hedge fund analytics. Since discovering the joys of functional programming, he's looked for ways to incorporate higher powered abstractions in all the code he writes, when he gets to write code.","description":"In this talk the argument will be made that Futures are an over used construct; appearing too frequently in places they don‚Äôt belong. Using examples in code, I will highlight problematic patterns and contrast those with alternative approaches. These alternatives, things like Task, syntax on type classes or nothing at all, are flexible, have equivalent performance and impose low cognitive costs. \r\n\r\nNothing discussed will require an understanding of category theory, weird names to Google or a PhD in astrophysics. It will challenge the perception asynchronous by default is the correct position to take. Be willing to explore that possibility. The talk is appropriate for all levels but mainly interesting to those building apps or writing libraries. ","location":"New York City","name":"Owein Reese","organization":"MediaMath","tags":[],"talk_format":"Medium (30 minutes)","title":"What Does This Future Hold?","twitter":"oweinreese","url":"https://www.oweinreese.com"},{"abstract":"There are a multitude of JavaScript and Scala.js-facade frameworks available. But why not write your next reactive web site, even a Single Page Application, in pure Scala, with Scala-HTML literals? Better yet, why not do it using pure FP, and without any compiler plugins? With monadic-html, you can!","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/31c95c0c159392d4c16fca6b55b5848d?s=500","bio":"Brandon Barker joined the Cornell [Center for Advanced Computing](https://www.cac.cornell.edu/) in 2014 as a scientific computing consultant. While at CAC he has worked on two mid-sized research applications written in Scala (one web-oriented, the other a graphical desktop application), and multiple smaller Scala projects and libraries. Also at the CAC, he contributed to non-Scala work including the development of scientific computing training materials and contributing development to [arXiv.org](https://arxiv.org/) - a large article preprint site used by over 300,000 authors and many more readers. \r\n\r\nPreviously, Brandon completed his doctoral [research](https://orcid.org/0000-0001-5732-9550) on method development in metabolic modeling and applications of metabolic modeling to genetic interactions at Cornell University; he remains involved with this research at Cornell. Brandon is interested in getting Scala more exposure in scientific computing and in graduate training in general.\r\n","description":"What is it like to write a reactive SPA application using only Scala.js and a few small Scala.js dependencies? At a minimum, there‚Äôs no need to worry about JavaScript dependencies! We present [monadic-html](https://github.com/OlivierBlanvillain/monadic-html), a tiny, new library for developing reactive web applications in a functional style. We will demo our own metadata editing application that only uses Bootstrap‚Äôs CSS as a non-Scala dependency. Monadic-html used DOM-binding and builds on a portable, stripped-down implementation of scala-xml that can compile to JavaScript, allowing scala-xml literals to be interpreted as HTML - no compiler macros necessary! Additionally, monadic-html uses monadic-rx, a subproject that is cross-platform and is a non-web-specific reactive library that is pure, referentially transparent and can integrate with the [Cats](https://github.com/typelevel/cats) library. Finally, we give a quick overview on some of the open issues and next steps for monadic-html.","location":"Unknown","name":"Brandon Barker","organization":"Cornell University","tags":["Scala.js","SPA","JavaScript","Scala","Reactive","DOM"],"talk_format":"Medium (30 minutes)","title":"Frameworkless Single Page Applications in Scala with monadic-html","twitter":"b_barker","url":"https://github.com/bbarker/"},{"abstract":"This talk will show how to use Apache Spark to run SQL queries on large, structured, distributed data sets. With the help of live code, we'll answer practical, common questions about some fun data sets and demonstrate with how to both explore and process data using Scala and Spark SQL.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/bae851d561142b846b3d440927841b6e?s=500","bio":"Kelley has worked in a variety of engineering roles, ranging from trading live cattle derivatives to building production data pipelines in Scala. As a developer evangelist at Twilio, she spends a lot of time thinking about how to make technical concepts accessible to new audiences. In her spare time, Kelley is an avid home chef and greatly enjoys reorganizing her tiny kitchen to accommodate completely necessary small appliance purchases.\r\n","description":"Apache Spark aims to solve the problem of working with large scale distributed data. Even though the project is only 3 years old, it has taken hold as one of the primary production data processing frameworks.\r\n\r\nWith recent advancements in the API, this talk will introduce a new way to run SQL queries on structured, distributed data. We'll walk through how to get started with Spark and discuss the tradeoffs for using different abstractions provided by the framework. With the help of live code, we'll answer practical, common questions about some fun data sets. We'll demonstrate with how easy and fast it is to both explore and process data using Spark SQL, and leave you with the tools to get started with your own distributed data.","location":"Unknown","name":"Kelley Robinson","organization":"Twilio","tags":["Spark","Scala","SQL","big data","jvm","distributed data"],"talk_format":"Lightning (15 minutes)","title":"Spark 2.x and Beyond","twitter":"kelleyrobinson","url":"http://krobinson.me"},{"abstract":"Compiler plugins ‚Äî¬†mysterious, difficult? Yet intriguing? Dark magic you're frightened, yet tempted, to wield? I'll cover what plugins can do, what existing plugins are popular, and how to write your own, based on one of several simple seed projects I'll present.","audience_level":"Intermediate","avatar":"https://secure.gravatar.com/avatar/51b5c8968586c2fd45753f665a3fdf32?s=500","bio":"Seth Tisue has been active in the Scala community since 2008, in diverse venues such as the Scalawags podcast, the Northeast Scala Symposium, and various online fora. Since 2015, Seth has been a member of the Scala team at Lightbend. Before joining Lightbend, he was using Scala and Java to build the compiler and other tooling for NetLogo, a programming language for students, teachers, and scientists. At Lightbend, Seth has focused on the build and testing infrastructure around Scala (including the Scala community build), and on collaborating with MicroFocus to add Scala support to Fortify SCA, an industry-standard static security analysis tool. Seth‚Äôs interests are compilers and interpreters, functional programming, and open-source software.","description":"popular (?) plugins include:\r\n\r\n- Scala.js, Scala Native\r\n- Zinc\r\n- kind-projector\r\n- scala-async, scala-continuations\r\n- (if this proposal is accepted I'll expand and refine this list, based on further research)\r\n\r\nwhat plugins can do:\r\n\r\n- inspect code at any stage of compilation\r\n- introspect on the process of compilation\r\n- alter code at any stage of compilation\r\nhow they do it:\r\n- your plugin's skeleton comes from implementing the compiler plugin API. it's easiest to copy an existing plugin; I'll present several simple examples you can use as starting points\r\n- you can also use the whole reflection API, the whole compiler API, and anything else you want","location":"Unknown","name":"Seth Tisue","organization":"Lightbend","tags":["compiler","plugins"],"talk_format":"Medium (30 minutes)","title":"Scala Compiler Plugins 101","twitter":"SethTisue","url":"https://www.linkedin.com/in/sethtisue"},{"abstract":"Explore ways of making the Scala type system work harder for you to improve correctness in your code. Examples from compile time verification of geographical CRSs  to enforcing constraints between domain models. Harness the power of the Scala compiler to catch errors sooner, and write correct code.","audience_level":"Advanced","avatar":"https://secure.gravatar.com/avatar/0d701d2c774cc6d6a82d8328fe25e2d7?s=500","bio":"Dick Wall has been developing in Scala since 2006, formed the Bay Area Scala Enthusiasts (one of the first Scala user groups) in 2007, and has been delivering Scala training since 2009 at all levels. Dick is a former host of the Java Posse podcast and a Scalawag (a Scala oriented podcast currently on hiatus). Recipient of the inaugural Phil Bagwell Award for Scala Community Service, Dick also revived and ran the SIP/SLIP Scala Process from 2015 to 2016.\r\n","description":"### Abstract\r\n\r\nIn this session we will explore ways of making the Scala type system work harder for you to improve correctness in your code. With examples ranging from compile time verification of geographical coordinate reference systems through to enforcing constraint rules between domain models, this talk will show you ways to harness the power of the Scala compiler to catch errors sooner, and make writing correct code easier.\r\n\r\n### Required Knowledge\r\n\r\nThis talk will build on knowledge of Scala generics, variance and implicits using real world examples. Attendees should be familiar with Scala type parameters, implicit parameters, type-classes, variance and bounds, although there will be a short recap of these concepts at the start of the talk.\r\n\r\n### Learning Objectives\r\n\r\nTo explore the possibilities for improving code discoverability, reliability, robustness and correctness using the Scala compiler and type system. This will include enforcing tighter constraints and rules within a problem domain, taking advantage of features in the core libraries as well as type rules you can create for yourself, the role of class and type tags as an intermediary between compile-time and run-time, and much more.\r\n","location":"Unknown","name":"Dick Wall","organization":"Escalate Software and CiBO Technologies","tags":["scala","type system","implicits","variance","bounds"],"talk_format":"Long (45 minues)","title":"Your Type System Working for You","twitter":"dickwall","url":"http://www.escalatesoft.com"},{"abstract":"Task / IO data types are surging in popularity, being awesome for dealing w/ concurrency. My talk is of what it took to make Monix's Task cancellable, along with the cats.effect.IO proposal, on why cancellability matters, along with practical examples of race conditions and problems that it solves.","audience_level":"Intermediate","avatar":"https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/7524/alex_nedelcu-square.jpg","bio":"Alexandru is a software developer living in Bucharest, Romania. A startup guy, he's dividing his time between work, family and personal projects, being fueled by the Monix project, along with the increased contributions to Typelevel Cats. He's also a proud father, husband, has a very unhealthy sleep schedule and appreciates talking about programming. Sometimes he blogs at: https://alexn.org","description":"Task / IO data types have been ported in Scala, inspired by Haskell's monadic IO and are surging in popularity due to the need in functional programming for referential transparency, but also because controlling side effects by means of lawful FP abstractions makes reasoning about asynchrony and concurrency so much easier. But concurrency brings with it race conditions, i.e. the ability to execute multiple tasks at the same time, possibly interrupting the losers and cleaning up resources afterwards and thus we end up reasoning about preemption.\r\n\r\nThis talk given by Alex Nedelcu, the author of Monix and a contributor to Typelevel's cats-effect, describes the design of Monix's Task for cancellability and preemption, a design that's  now being proposed for inclusion in cats-effect. Topics include how cancelable tasks can be described, along with examples of race conditions that people can relate to, highlighting the challenges faced when people use an IO/Task data type that cannot be interrupted.","location":"Rom√¢nia","name":"Alexandru Nedelcu","organization":"Typelevel","tags":["monix","typelevel","scala","functional-programming","concurrency","async"],"talk_format":"Long (45 minues)","title":"Cancellable IO","twitter":"alexelcu","url":"https://alexn.org"},{"abstract":"Let's do some code review! Quasar is an OSS compiler and database written in purely functional Scala which implements a superset of SQL atop a JSON datastore. In this talk, we will open our editor and traverse the code from top to bottom, covering everything from query planning to bits on disk!","audience_level":"Advanced","avatar":"https://secure.gravatar.com/avatar/6883cab0dedd4d45544abfc7eb788e82?s=500","bio":"Daniel Spiewak is a software developer based out of Boulder, CO. Over the years, he has worked with Java, Scala, Ruby, C/C++, ML, Clojure and several experimental languages. He currently spends most of his free time researching parser theory and methodologies, particularly areas where the field intersects with functional language design, domain-specific languages and type theory.","description":"The concept behind this talk is basically just trying to understand database implementations and compilers better through the lens of an actual production implementation.  Everyone uses databases in various forms, but few of us know how they are actually implemented.  This talk goes through everything from the broad ideas and architecture all the way down to the implementation of data structures, algorithms, and optimizations to make all of it fast.  It also serves as a decent introduction to how exactly you can structure a large, production Scala project written in a purely functional style, and all of the ways to make that code fast on the JVM.  If you're interested in compilers, data structures, databases, performance optimization, recursion schemes, graph theory, formal meta-theories of set manipulation algebras, or even just making fun of my Scala indentation style, you will enjoy this talk!","location":"Boulder, CO","name":"Daniel Spiewak","organization":"SlamData","tags":["Scala","FP","Databases","SQL","Graphs","Recursion Schemes","Performance","Compilers"],"talk_format":"Long (45 minues)","title":"Full Stack Review: Understanding a Database Implementation","twitter":"djspiewak","url":"http://www.codecommit.com"},{"abstract":"During the last 5 years, I've participated in different enterprise software projects based on Scala ecosystem. All of them were greenfield projects which allowed us to try different architectural and design approaches to deliver the products being built. This is a experience report.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/008303ccb35993875f1ecc6152f9b5e8?s=500","bio":"Soy desarrollador de software, especializado en la construcci√≥n de sistemas distribu√≠dos en tecnolog√≠as basadas en la JVM. Fomento la integraci√≥n del paradigma funcional en la construcci√≥n de componentes de software, particularmente utilizando Scala como lenguaje.\r\n\r\n","description":"I'll present our in-house reference architecture that we use to guide our developers in how a service should look like, solving common requirements such as error handling, graceful shutdown, multiple ports and adapters, authentication and authorization; all of this using DDD, CQRS and functional patterns to improve stability and testability.","location":"Unknown","name":"Jeferson David Ossa","organization":"S4N","tags":["Functional programming","Architecture","Patterns","Programming methodologies","Development."],"talk_format":"Medium (30 minutes)","title":"Functional Design for Reference Architectures","twitter":"unyagami","url":"http://s4n.co/"},{"abstract":"Akka is the most mature choice to implement the traits of the Reactive Manifesto, thanks to the Actor model. But  we need to rely on some external infrastructure to automatically scale up or down our services. We found Docker & Kubernetes to be a perfect match for clustered Akka applications.","audience_level":"Intermediate","avatar":"https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/13071/profilepic_ushuaia-650.jpg","bio":"Tech Lead, Reactive Architect and Scala Developer. Community guy at the root - I'm the organiser of the [Reactive Amsterdam](https://www.meetup.com/Reactive-Amsterdam/) meetup. Long distance bicycle touring and fingerpicking guitar.","description":"Have you ever wondered how to *actually* achieve elasticity on the cloud, outside of your cushy local dev environment?\r\n\r\nAkka is the most mature choice to implement the traits of the Reactive Manifesto, thanks to the Actor model. Resilience is enabled by asynchronous message passing and Actor supervision. Location transparency, message routing and the \"share nothing\" approach enable seamless scalability, but once our app is deployed we need to rely on some external infrastructure to automatically scale up or down our services. At this point, Akka alone is not sufficient anymore. What else do we need?\r\n\r\nWe found Docker & Kubernetes to be a perfect match for clustered Akka applications running in the cloud. Thanks to the Kubernetes API, one can write infrastructure logic that complements the business logic. This leads to a general approach of infrastructure-as-code tailored to each different business case, which in turn lets companies achieve maximum efficiency and resource usage.\r\n\r\nDuring this talk we will cover features from both Akka and Kubernetes, plus example code in Scala: familiarity with these technologies is recommended. Our example will rely on Google Cloud infrastructure.\r\n","location":"Amsterdam","name":"Fabio Tiriticco","organization":"Fabway","tags":["scala","akka","kubernetes","docker","reactive","cloud native"],"talk_format":"Long (45 minues)","title":"Cloud Native Akka & Kubernetes: the holy grail to elasticity?","twitter":"ticofab","url":"http://ticofab.io"},{"abstract":"Type-driven Development seems new and exciting but, can it help real businesses deploy real products? My answer is 'Yes!' This talk will provide a basic knowledge of what `type-driven` is as well as an understanding of what it takes to create a Scala application in the type-driven discipline.","audience_level":"Advanced","avatar":"https://secure.gravatar.com/avatar/efaab4ba42d459365cdd2534ab280c86?s=500","bio":"I have been developing software professionally since 2010. At the end of 2013, I Googled \"a better java\" and that's how I stumbled upon the Scala programming language. Since then I've really gotten into strongly-typed, purely functional development. Currently, I work in center city Philadelphia for IntegriChain writing typeful, functional Scala applications for life sciences.","description":"Type-driven Development seems new and exciting but, can it help real businesses deploy real products? My answer is 'Yes!' This talk will provide a basic knowledge of what `type-driven` is as well as an understanding of what it takes to create a Scala application in the type-driven discipline.","location":"Unknown","name":"Marcus Henry","organization":"Integrichain, Inc.","tags":["type driven","functional","programming"],"talk_format":"Long (45 minues)","title":"Type-driven Development","twitter":"dreadedsoftware","url":"https://dreadedsoftware.com"},{"abstract":"From trading exchanges to e - commerce sites, today‚Äôs services need be engineered for performance. We will focus on methods to improve the performance characteristics of your Scala code through mechanical sympathy.","audience_level":"Intermediate","avatar":"https://secure.gravatar.com/avatar/32dff08ed1c0f96b284048ba88b92f7a?s=500","bio":"Zahari Dichev has worked as a trading systems developer in the City of London. Nowadays he works as a consultant at Scalac.io, helping companies with all-he-can Scala related.  Passionate advocate of mechanical sympathy and contributor the the Akka Affinity dispatcher, he is interested in sharing his knowledge and views on Scala, Akka, performance and the JVM. \r\n","description":"This talk will  focus on methods to improve the performance characteristics of your Scala systems. This will be achieved through theoretical deep dive into the internals of the JVM, the scala compiler and the underlying hardware architecture. This will be supplemented by practical examples that discuss the approaches used to achieve higher performance. We will cover ways to minimise object instantiation and GC pressure in Scala. Following that we will explain the  CPU cache hierarchy and show you why and how data access patterns matter. We will focus on practical examples to achieve better CPU cache utilization through cache oblivious algorithms. Moving on, we will explore the negative effects of locks on performance and show you different techniques to tackle such problems. We will conclude by introducing the new Akka AffinityDispatcher, discuss when it is appropriate to use it and show you how it can drastically boost the performance of your actor systems. All of that will be mixed-in with lots of examples, bytecode and CPU perf-counter analysis and tons of fun.\r\n\r\n**Key learning objectives:**\r\n\r\n*   To provide the audience with the required knowledge to identify and tackle the most common performance problems in Scala code bases. \r\n*   To equip the audience with the techniques to perform in - depth performance analysis.\r\n*   To show that Scala can still be expressive concise and abstract even when significant performance improvements are needed.\r\n*   To familiarize the audience with the new Affinity dispatcher in Akka and show when it should be used.\r\n","location":"Unknown","name":"Zahari Dichev","organization":"","tags":["scala","performance","concurrency","jvm"],"talk_format":"Long (45 minues)","title":"High performance Scala systems without tears","twitter":"zaharidichev","url":"https://www.linkedin.com/in/zaharidichev/"},{"abstract":"This talk describes a design for staying compatible to old, serialized data schemas in a simple and type-safe way. SQL databases may favor schema migrations, NoSQL don't require them, block chain can't do them. We'll show ho to survive well. As preferred in Haskell or Scala.","audience_level":"Intermediate","avatar":"https://secure.gravatar.com/avatar/71d42af93954912387365bc864f69b37?s=500","bio":"Software Engineer at Symbiont.io, author of CBT, co-author of Slick","description":"","location":"NYC","name":"Christopher Vogt","organization":"symbiont.io","tags":["Scala","haskell","databases","nosql","schema","migrations"],"talk_format":"Lightning (15 minutes)","title":"Eternal Compatibility","twitter":"cvogt","url":""},{"abstract":"fs2 supports complex concurrent Stream combinators and data structures. They are all built out of two simple primitives, Ref and Promise. This talk will show what they are, touch on their implementation, and describe how they can be used to build more complex abstractions.","audience_level":"Advanced","avatar":"https://secure.gravatar.com/avatar/e2be8f2b920bad4c6923f9edd7318b4f?s=500","bio":"I'm a Senior Software Engineer based in Edinburgh, UK, working in Scala in the financial industry.\r\nI also actively participate in Open Source (as SystemFw): I'm one of the maintainers of fs2, and a contributor to cats, shapeless, http4s and most of the other libraries in the Scala FP ecosystem.\r\nI have a passion for helping people master advanced concepts (e.g. see [here](https://twitter.com/balajisivaraman/status/894976114304499712) or [here](https://twitter.com/etorreborre/status/933344847364313088)), so hit me up on Gitter if you have a question!","description":"fs2 is a purely functional streaming library. Notably, it includes support for concurrent stream combinators and data structures, which are all pure, nonblocking, and support any type with a cats-effect `Effect` instance. At the core of its concurrency scheme lie two primitives, `Ref` and `Promise` : this talk will show what they are, touch on their implementation, and describe how they can be used to build more complex abstractions. If you like pure FP, concurrency, and looking under the hood, this is the talk for you.","location":"Unknown","name":"Fabio Labella","organization":"","tags":["Pure FP","fs2","concurrency primitives"],"talk_format":"Long (45 minues)","title":"The new fs2 concurrency primitives: Ref + Promise","twitter":"","url":"https://github.com/SystemFw"},{"abstract":"The State Monad cannot handle concurrent state, which is essential in real world applications. This talk will show how mutable, shared, concurrent state is not only possible, but very simple in pure FP, whilst remaining composable and easy to reason about.","audience_level":"Intermediate","avatar":"https://secure.gravatar.com/avatar/e2be8f2b920bad4c6923f9edd7318b4f?s=500","bio":"I'm a Senior Software Engineer based in Edinburgh, UK, working in Scala in the financial industry.\r\nI also actively participate in Open Source (as SystemFw): I'm one of the maintainers of fs2, and a contributor to cats, shapeless, http4s and most of the other libraries in the Scala FP ecosystem.\r\nI have a passion for helping people master advanced concepts (e.g. see [here](https://twitter.com/balajisivaraman/status/894976114304499712) or [here](https://twitter.com/etorreborre/status/933344847364313088)), so hit me up on Gitter if you have a question!","description":" A shared cache, a concurrent counter, a mutable DB connection: they are all common concerns in real-world applications that don't fit the state monad model of returning a new copy of the state each time. Does this mean we should drop pure FP in those cases? Of course not!\r\n\r\n This talk will show how mutable, shared, concurrent state is not only possible, but very simple in pure FP, whilst remaining composable and easy to reason about.\r\n\r\n On one hand, we will see how to put together several concepts such as the `IO` type, `Kleisli`, and `Free/Final Tagless`.\r\n On the other, we'll get at the very heart of what purity is all about.\r\n","location":"Unknown","name":"Fabio Labella","organization":"","tags":["Pure FP","State","Program architecture"],"talk_format":"Long (45 minues)","title":"Shared state in pure FP: when a state monad won't do","twitter":"","url":"https://github.com/SystemFw"},{"abstract":"In this talk we will take a look at Nelson, a deployment orchestration system that applies functional programming not only in its implementation, but also in its system behavior in managing the messy world of deployment infrastructure.","audience_level":"Intermediate","avatar":"https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/7596/me.jpg","bio":"Adelbert is a software engineer in the Bay Area. His day job tends to involve working on tooling and infrastructure. Recently he has been exploring the intersection of functional programming and system design.","description":"As functional programmers we work hard to keep things immutable and referentially transparent. However, these noble pursuits often stop with our text editors, the resulting code flung over the wall to be built and deployed in mutable, imperative systems. In this talk we will take a look at Nelson, a deployment orchestration system that applies functional programming not only in its implementation, but also in its system behavior in managing the messy world of deployment infrastructure. Where Free algebras and streams allow the code to be easily extended to support different source repositories, schedulers, and health checkers, Nelson's strict stance on immutable deployments inform important system level decisions such as deployment workflows and service discovery. Having now been run at a couple of companies under different configurations, Nelson serves as a prime example of how functional programming is for the real world and can influence not just code, but systems as well.","location":"Bay Area","name":"Adelbert Chang","organization":"Target","tags":["systems","scala","fp","nelson","deployments"],"talk_format":"Long (45 minues)","title":"Nelson: Functional programming in system design","twitter":"adelbertchang","url":"https://adelbertc.github.io/"},{"abstract":"ScalaQuest is a fun, enticing game that will take you from Zero to Hero in your path to learning Scala. Battle Goblins, help Wizards and face all kinds of challenges to prove your worth.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/9cf8d6ee2ec2388f4d3431e73c2990c1?s=500","bio":"I'm a Software Engineer and Trainer with a passion for building systems and products that help others in profound, meaningful ways. \r\n\r\nI'm currently having fun with Big Data at Shopify, and having a blast leading ScalaQuest, the game to learn Scala. \r\n\r\nI also organize Scala Up North, the first and only Scala conference in Canada.\r\n\r\nI love teaching and spent a few years working with Lightbend on training others on how to use Scala, Akka and Play to write elegant, solid and maintainable code.","description":"ScalaQuest is a fun, enticing game that will take you from Zero to Hero in your path to learning Scala.\r\n\r\nBattle Goblins, help Wizards and face all kinds of challenges to prove your worth. Start on the safe haven of plain harmless Classes and make your way to the treacherous Implicit Forests.\r\n\r\nOur goal is to create one of the least painful ways to learn Scala. \r\n\r\nIn this talk, we will showcase our progress with ScalaQuest, with a focus on some of the challenges we've faced, such as compiling user-submitted code with Amazon Lambdas, connecting Akka Persistence with Amazon Dynamo, keeping a snappy UI and crafting effective learning material.\r\n\r\n","location":"Unknown","name":"Alejandro Luj√°n","organization":"Shopify","tags":["scala","gaming","game"],"talk_format":"Long (45 minues)","title":"ScalaQuest: the Scala adventure","twitter":"andanthor","url":"http://alejandrolujan.com"},{"abstract":"Serverless is a hot topic in the tech industry and also a point of contention. I‚Äôd like to discuss if it is worth to use serverless and what are its advantages and disadvantages. I'd also like to describe cases we were considering serverless Lastly, I‚Äôd like to talk about how Scala fits into this.","audience_level":"All","avatar":"https://secure.gravatar.com/avatar/2448bfcefbdc8f0e351abd3ad0b75682?s=500","bio":"Petr is a Consultant who specialises in the design and implementation of highly scalable, reactive and resilient distributed systems. He is a functional programming and open source evangelist and has expertise in the area of big data and machine classification techniques. Petr participates in the whole software delivery lifecycle; from requirement analysis & design, through to maintaining systems in production. During his career, Petr has worked for various companies from start-ups to large international corporations.\r\n\r\nPetr's current interests are Reactive Systems, Distributed Streaming, and Deep Learning. Petr is also an author of #ThisWeekInScala and an occasional conference speaker.","description":"Serverless is a hot topic in the software architecture world and also one of the points of contention. Serverless let us run our code without provisioning or managing servers. We don't have to think about servers at all. Things like elasticity or resilience might not longer be our problem anymore. On the other hand, we have to embrace a little bit different approach how to design our applications. We also have to give up a lot of control we might want and the most important we have to use technology which just might not be ready.\r\n\r\nIn this talk, I‚Äôd like to discuss if it is worth to use serverless in our applications, what are the advantages and disadvantages of this approach. Secondly, I'd like to describe various use cases we were considering serverless and what was the result. And finally, I‚Äôd like to talk about how Scala fits into this. This talk should be interesting for everyone who is considering using serverless or just heard this word somewhere and would like to learn more. The talk is a little bit more focused on AWS but the understanding of the concepts I‚Äôm going to talk about should be beneficial even if you prefer a different service provider.","location":"New York City","name":"Petr Zapletal","organization":"BAMTech Media","tags":["scala","sbt","serverless","aws"],"talk_format":"Medium (30 minutes)","title":"Real World Serverless","twitter":"petr_zapletal","url":""},{"abstract":"Deep learning is predominantly done in Python, a type-unsafe language. Try changing this unfortunate fact by doing it in Scala instead! With expressive types, compile-time typechecking, and awesome DSLs, we present Nexus, a typesafe, expressive and succinct deep learning framework.","audience_level":"Intermediate","avatar":"https://secure.gravatar.com/avatar/5c2812bfe4162fd9fb3fbba14db099f7?s=500","bio":"I'm a PhD student majoring in Natural Language Processing (NLP) and the general field of Artificial Intelligence (AI). As a language aficionado, I love both natural languages (what we speak!) and programming languages (Scala is my favorite!). Saddened by the fact that nearly everyone is using Python in AI -- I aspire to create Scala stuff that solves general AI problems in a most typesafe, and most un-Pythonic way.\r\n","description":"The preferred language of current deep learning frameworks (TensorFlow, PyTorch, MXNet, DyNet, etc.) is Python, a type-unsafe language. To remedy this unfortunate fact, we present Nexus, a prototypical typesafe deep learning engine in Scala. Being extraordinarily expressive in types, Nexus offers unforseen typesafety and succinctness to deep learning developers by extensive use of typelevel computation through the popular library Shapeless. In this talk I'll introduce the design of a deep learning framework, and how Scala's type-level computation abilities could make it safer and more expressive. Ideas include generalized algebraic data types (GADTs), heterogeneous lists (HLists), program verification (compiling-as-proofs with Scala implicits), and introductory machine learning.","location":"Unknown","name":"Tongfei Chen","organization":"Johns Hopkins University","tags":["deep learning","typelevel programming","shapeless"],"talk_format":"Long (45 minues)","title":"Towards Typesafe Deep Learning in Scala","twitter":"ctongfei","url":"http://cs.jhu.edu/~tongfei"}]
